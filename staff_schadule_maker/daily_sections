import random
import datetime
from copy import deepcopy
from enum import Enum

class Section(Enum):
    s30591 = "30591"
    s30595 = "30595"
    s30599 = "30599"
    s30596 = "30596"
    s30597 = "30597"
    sIfree = "Ifree"
    s30594 = '30594'
    sEfree = "Efree"
    
# カレンダーの用意
first_date = datetime.date(2024,7,1)
last_date = datetime.date(2024,7,31)

class Staff():
    def __init__(self, name, rank, is_phd = False, assignable_section = None, icu_team = False, ng_request = None):
        self.name = name
        self.rank = rank
        self.is_phd = is_phd
        if assignable_section is None:
            assignable_section = []
        self.assignable_section = assignable_section
        self.icu_team = icu_team
        if ng_request is None:
            ng_request = []
        self.ng_request = ng_request
    
# スタッフ名簿
staffs = [
    Staff("Asada", rank=16,   assignable_section = [Section.s30591, Section.s30595, Section.s30596], icu_team = True, ng_request =[]),
    Staff("Yamamoto", rank=16,   assignable_section = [Section.s30591, Section.s30595, Section.s30596], icu_team = True, ng_request =[]),

    Staff("SatoYuko", rank= 8,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Nakano", rank= 6,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Kimura", rank= 6,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Arita", rank= 6,    assignable_section = [Section.s30595, Section.s30599, Section.s30594, Section.sEfree], ng_request =[]),
    Staff("SatoKazu", rank= 5,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Dozono", rank= 5,    assignable_section = [Section.s30595, Section.s30599, Section.s30594, Section.sEfree, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
   
]

def get_staff(name):
    return next((staff for staff in staffs if staff.name == name), None)

class Daily_assignments:
    def __init__(self, date:datetime.date) -> None:
        self.date = date
        self.day_staff = {
                            Section.s30591: None,
                            Section.s30595: None,
                            Section.s30599: None,
                            Section.s30596: None,
                            Section.s30597: None,
                            Section.sIfree: [],
                            Section.s30594: None,
                            Section.sEfree: []
        }
        self.night_staff ={
                            Section.s30595: None,
                            Section.s30599: None,
                            Section.s30596: None
        }

class Schedule_matrix:
    def __init__(self) -> None:
        self.calendar = []
        self.schedules = {}
        current_date = first_date
        while current_date <= last_date:
            self.calendar.append(current_date)
            daily_assignments = Daily_assignments(current_date)
            self.schedules[current_date] = daily_assignments
            current_date += datetime.timedelta(days=1)

    def is_weekday(self, date)->bool:
        return date.weekday() < 5
    
    def schedule_for(self, date):
        return self.schedules.get(date)
    
    def daily_assignable_staffs(self, date):
        daily_assignable_staffs = []
        day_assignable = []
        night_assignable = []
        next_date = date + datetime.timedelta(days = 1)

        # 勤務不可日とその前日夜勤を除外して勤務可能者リストを作成
        for staff in staffs:
            if date not in staff.ng_request:
                day_assignable.append(staff)
                if next_date not in staff.ng_request:
                    night_assignable.append(staff)

        # 前日夜勤者を除外
        previous_night_staffs = []
        if date != first_date:
            previous_day = date - datetime.timedelta(days = 1)
            previous_day_schedule = self.schedule_for(previous_day)
            for section, staff in previous_day_schedule.night_staff.items():
                if staff:
                    previous_night_staffs.append(staff)
        for staff in previous_night_staffs:
            if staff in day_assignable:
                day_assignable.remove(staff)
            if staff in night_assignable:
                night_assignable.remove(staff)

        daily_assignable_staffs = [day_assignable, night_assignable]
        return daily_assignable_staffs

    # 30591を割り当て
    def assign_30591(self):
        # 山本：火水木の日勤30591、日の夜勤30596
        staff = get_staff("Yamamoto")
        for date in self.calendar:
            if date.weekday() in (1, 2, 3):  # Tuesday, Wednesday, Thursday
                self.schedule_for(date).day_staff[Section.s30591] = staff
            if date.weekday() == 6:  # Sunday
                self.schedule_for(date).night_staff[Section.s30596] = staff
        # 浅田：月金の日勤30591
        staff = get_staff("Asada")
        for date in self.calendar:
            if date.weekday() in (0, 4):  # Monday, Friday
                self.schedule_for(date).day_staff[Section.s30591] = staff


    # 30596, 30597を連続で割り当て
    def assign_30596(self):
        # 30596可能なメンバーは佐藤悠、佐藤一、中野、堂園、木村
        icu_staffs = [get_staff(name) for name in ("SatoYuko", "SatoKazu", "Nakano", "Dozono", "Kimura")]
        
        for _ in range(100):
            start_date = first_date
            staff_list = deepcopy(icu_staffs)
            assignment_successful = True
            
            while start_date <= last_date:
                assigned = False    
                for staff in staff_list:
                    can_assign = True
                    for i in range(4):
                        if start_date != first_date:
                            previous_date = start_date - datetime.timedelta(days=i)
                            day_assignable, night_assignable = self.daily_assignable_staffs(previous_date)
                            if staff not in day_assignable or staff not in night_assignable:
                                can_assign = False
                                break
                        check_date = start_date + datetime.timedelta(days=i)
                        if check_date > last_date:
                            j = i
                            break
                        else:
                            j = 4
                        day_assignable, night_assignable = self.daily_assignable_staffs(check_date)
                        if staff not in day_assignable or (i == 3 and staff not in night_assignable):
                            can_assign = False
                            break
                    
                    if can_assign:
                        # 連続勤務割り当て
                        for i in range(j):
                            assign_date = start_date + datetime.timedelta(days=i)
                            daily_assignments = self.schedule_for(assign_date)
                            daily_assignments.day_staff[Section.s30596] = staff
                            if i == 3:
                                daily_assignments.night_staff[Section.s30596] = staff
                        # 初日前日の日勤s30597を割り当て
                        if start_date != first_date:
                            previous_date = start_date - datetime.timedelta(days=1)
                            self.schedule_for(previous_date).day_staff[Section.s30597] = staff
                        
                        assigned = True
                        start_date += datetime.timedelta(days=4)
                        staff_list = deepcopy(icu_staffs)
                        break
                
                if not assigned:
                    assignment_successful = False
                    break
            
            if assignment_successful:
                break

    # 30594を連続で割り当て
    # 夜勤を割り当て
    # 院生から夜勤を割り当て
    # 外勤を割り当て
    # Efree, Ifreeを割り当て


    

def main():
    schedule_matrix = Schedule_matrix()
    schedule_matrix.assign_30591()
    schedule_matrix.assign_30596()

    indexes = ["Date", "D_30591", "D_30595", "D_30599", "D_30594", "D_Efree", "D_30596", "D_30597", "D_Ifree", "N_30595", "N_30599", "N_30596"]
    for index in indexes:
        print(f"{index}", end="\t")
    print("")
    for entry in schedule_matrix.schedules.values():
        output = [f"{entry.date.strftime('%m-%d')}"]
        output.append(f"{entry.day_staff[Section.s30591].name if entry.day_staff[Section.s30591] else 'None'}")
        output.append(f"{entry.day_staff[Section.s30595].name if entry.day_staff[Section.s30595] else 'None'}")
        output.append(f"{entry.day_staff[Section.s30599].name if entry.day_staff[Section.s30599] else 'None'}")
        output.append(f"{entry.day_staff[Section.s30594].name if entry.day_staff[Section.s30594] else 'None'}")
        output.append(f"{' '.join([staff.name for staff in entry.day_staff[Section.sEfree]]) if entry.day_staff[Section.sEfree] else 'None'}")
        output.append(f"{entry.day_staff[Section.s30596].name if entry.day_staff[Section.s30596] else 'None'}")
        output.append(f"{entry.day_staff[Section.s30597].name if entry.day_staff[Section.s30597] else 'None'}")
        output.append(f"{' '.join([staff.name for staff in entry.day_staff[Section.sIfree]]) if entry.day_staff[Section.sIfree] else 'None'}")
        output.append(f"{entry.night_staff[Section.s30595].name if entry.night_staff[Section.s30595] else 'None'}")
        output.append(f"{entry.night_staff[Section.s30599].name if entry.night_staff[Section.s30599] else 'None'}")
        output.append(f"{entry.night_staff[Section.s30596].name if entry.night_staff[Section.s30596] else 'None'}")
        print("\t".join(output))

main()