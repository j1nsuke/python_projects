import random
import datetime
from copy import deepcopy, copy
from enum import Enum
from operator import attrgetter

class Time(Enum):
    day = "Day"
    night = "Night"
    extra = "Extra"
class Section(Enum):
    s30591 = "30591"
    s30595 = "30595"
    s30599 = "30599"
    s30596 = "30596"
    s30597 = "30597"
    sIfree = "Ifree"
    s30594 = '30594'
    sEfree = "Efree"

    sonoda = "Sonoda"
    teikyo = "Teikyo"
    mitsui = "Mitsui"
    oomori = "Oomori"
    taitou = "Taitou"
    chibat = "Chibatoku"
    extras = "Kojin_extras"
day_sections = (Section.s30591, Section.s30595, Section.s30599, Section.s30594, Section.sEfree, Section.s30596, Section.s30597, Section.sIfree)
night_sections = (Section.s30595, Section.s30599, Section.s30596)
extra_sections =  (Section.sonoda, Section.teikyo, Section.mitsui, Section.taitou, Section.oomori, Section.chibat, Section.extras)

# カレンダーの用意
first_date = datetime.date(2024,7,1)
last_date = datetime.date(2024,9,30)

class Staff():
    def __init__(self, name, rank, is_phd = False, assignable_section = None,  ng_request = None):
        self.name = name
        self.rank = rank
        self.assignable_section = assignable_section
        self.ng_request = ng_request if ng_request is not None else []
        self.is_phd = is_phd
        self.work_count = 0
        self.extra_work_count = 0

# スタッフ名簿
staffs = [
    Staff("Asada", rank=16,     assignable_section = [Section.s30591], ng_request =[]),
    Staff("Yamamoto", rank=16,  assignable_section = [Section.s30591], ng_request =[]),
    Staff("Wada", rank=18,      assignable_section = [Section.s30599, Section.sEfree, Section.s30595, Section.s30594], ng_request =[]),
    Staff("Horie", rank=17,     assignable_section = [Section.s30599, Section.sEfree, Section.s30595, Section.s30594], ng_request =[]),
    Staff("SatoTaku", rank=12,  assignable_section = [Section.s30599, Section.s30595, Section.s30594], ng_request =[], is_phd = True),
    Staff("Tagami", rank=12,    assignable_section = [Section.s30599, Section.s30595, Section.s30594], ng_request =[], is_phd = True),
    Staff("Takai", rank=10,     assignable_section = [Section.s30599, Section.s30595, Section.s30594, Section.s30596], ng_request =[], is_phd = True),
    Staff("Mizuno", rank=10,    assignable_section = [Section.s30599, Section.sIfree, Section.s30597, Section.sEfree, Section.s30595, Section.s30594, Section.s30596], ng_request =[], is_phd = True),
    Staff("SatoYuko", rank= 8,  assignable_section = [Section.s30599, Section.sIfree, Section.s30597, Section.s30595, Section.s30596], ng_request =[]),
    Staff("Nakano", rank= 6,    assignable_section = [Section.s30599, Section.sEfree, Section.s30595, Section.s30594], ng_request =[]),
    Staff("Kimura", rank= 6,    assignable_section = [Section.s30599, Section.sIfree, Section.s30597, Section.s30595, Section.s30596], ng_request =[]),
    Staff("Arita", rank= 6,     assignable_section = [Section.s30599, Section.sEfree, Section.s30595, Section.s30594], ng_request =[]),
    Staff("SatoKazu", rank= 5,  assignable_section = [Section.s30599, Section.sIfree, Section.s30597, Section.s30595, Section.s30596], ng_request =[]),
    Staff("Dozono", rank= 5,    assignable_section = [Section.s30599, Section.sIfree, Section.s30597, Section.s30595, Section.s30594, Section.s30596], ng_request =[]),
    Staff("Ikegami", rank= 4,   assignable_section = [Section.s30599, Section.sEfree, Section.s30594], ng_request =[]),
    Staff("Tanimoto", rank= 4,  assignable_section = [Section.s30599, Section.sEfree, Section.s30597, Section.sIfree], ng_request =[]),
    Staff("Kawakami", rank= 3,  assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    Staff("Kawada", rank= 3,    assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    Staff("Noda", rank= 3,      assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    Staff("Matuyama", rank= 3,  assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    Staff("Sue_", rank= 3,      assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    # Staff("Taki", rank= 7,    assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    # Staff("Kobayasi", rank= 3,    assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
    # Staff("Ikeda", rank= 5,    assignable_section = [Section.s30599, Section.sEfree], ng_request =[]),
]

def get_staff_by_name(name):
    return next((staff for staff in staffs if staff.name == name), None)
def get_staff_by_section(section):
    return [staff for staff in staffs if section in staff.assignable_section]

# 部署ごとスタッフリスト
icu_staff_name = ("SatoYuko", "SatoKazu", "Kimura", "Dozono")
eicu_staff_name = ("Nakano", "Arita", "Dozono", "Ikegami")
class Daily_assignments:
    def __init__(self, date:datetime.date) -> None:
        self.date = date
        self.staff_of = {
            Time.day    :{
                        Section.s30591: None,
                        Section.s30595: None,
                        Section.s30599: None,
                        Section.s30596: None,
                        Section.s30597: None,
                        Section.sIfree: [],
                        Section.s30594: None,
                        Section.sEfree: []
            },
            Time.night  :{
                        Section.s30595: None,
                        Section.s30599: None,
                        Section.s30596: None
            },
            Time.extra  :{
                        Section.sonoda: None,
                        Section.teikyo: None,
                        Section.mitsui: None,
                        Section.oomori: None,
                        Section.taitou: None,
                        Section.chibat: None,
                        Section.extras: []
            }
        }
    def assign(self, time:Time, section:Section, staff:Staff):
        if section in (Section.sEfree, Section.sIfree, Section.extras):
            self.staff_of[time][section].append(staff)
        else:
            self.staff_of[time][section] = staff
        if time == Time.day:
            staff.work_count += 1
        elif time == Time.night:
            staff.work_count += 1.5
        elif time == Time.extra:
            if section == Section.taitou:
                staff.extra_work_count += 2
            else:
                staff.extra_work_count += 1

def random_min_count(staff_list, extra_flag = False): 
    if extra_flag:
        staff_list.sort(key=attrgetter('extra_work_count'))
        temp_list = staff_list[:1] 
        for i in range(1, len(staff_list)):
            if staff_list[0].extra_work_count == staff_list[i].extra_work_count:
                temp_list.append(staff_list[i])
            else:
                break
    else:
        staff_list.sort(key=attrgetter('work_count'))
        temp_list = staff_list[:1] 
        for i in range(1, len(staff_list)):
            if staff_list[0].work_count == staff_list[i].work_count:
                temp_list.append(staff_list[i])
            else:
                break
    return random.choice(temp_list)

class Schedule_matrix:
    def __init__(self) -> None:
        self.calendar = [] 
        self.schedules = {}
        current_date = first_date
        while current_date <= last_date:
            self.calendar.append(current_date)
            daily_assignments = Daily_assignments(current_date)
            self.schedules[current_date] = daily_assignments
            current_date += datetime.timedelta(days=1)
    def is_weekday(self, date)->bool:
        return date.weekday() < 5
    def daily_assignable_staffs(self, date, include_phd = False):
        # 勤務不可日とその前日夜勤を除外して勤務可能者リストを作成、院生を除外
        next_date = date + datetime.timedelta(days = 1)
        if include_phd == False:
            day_assignable = [staff for staff in staffs if not staff.is_phd and date not in staff.ng_request]
        else:
            day_assignable = [staff for staff in staffs if date not in staff.ng_request]
        night_assignable = [staff for staff in day_assignable if next_date not in staff.ng_request]
        # 前日夜勤者を除外リストに taitouを追加！
        previous_night_staffs = []
        if date != first_date:
            previous_day = date - datetime.timedelta(days = 1)
            previous_day_schedule = self.schedules[previous_day]
            previous_night_staffs = [previous_day_schedule.staff_of[Time.night][section] for section in night_sections if previous_day_schedule.staff_of[Time.night][section]]
            previous_night_staffs.append(previous_day_schedule.staff_of[Time.extra][Section.taitou] if previous_day_schedule.staff_of[Time.extra][Section.taitou] is not None else None)
        # 当日勤務者を除外リストに
        same_date_day_staffs = []
        same_date_schedule = self.schedules[date]
        for time in (Time.day, Time.extra):
            for section in self.schedules[date].staff_of[time]:
                if same_date_schedule.staff_of[time][section] is not None:
                    if section in (Section.sEfree, Section.sIfree, Section.extras):
                        same_date_day_staffs += same_date_schedule.staff_of[time][section]
                    else:
                        same_date_day_staffs.append(same_date_schedule.staff_of[time][section])
        same_date_night_staffs = [same_date_schedule.staff_of[Time.night][section] for section in night_sections if same_date_schedule.staff_of[Time.night][section] is not None]
        # 翌日勤務者を夜勤の除外リストに
        next_date_all_staffs = []
        if next_date <= last_date:
            next_date_schedule = self.schedules[next_date]
            for time in Time:
                for section in self.schedules[next_date].staff_of[time]:
                    if next_date_schedule.staff_of[time][section] is not None:
                        if section in (Section.sEfree, Section.sIfree, Section.extras):
                            next_date_all_staffs += next_date_schedule.staff_of[time][section]
                        else:
                            next_date_all_staffs.append(next_date_schedule.staff_of[time][section])
        # 除外リストを使用
        day_assignable = [staff for staff in day_assignable if staff not in previous_night_staffs + same_date_day_staffs]
        night_assignable = [staff for staff in night_assignable if staff not in previous_night_staffs + same_date_night_staffs+ next_date_all_staffs]
        return [day_assignable, night_assignable]
    def copy_matrix(self): # copyの際にスタッフインスタンスの参照がずれないように修正
        temp_matrix = deepcopy(self)
        for date in temp_matrix.calendar:
            for time in Time:
                for section in temp_matrix.schedules[date].staff_of[time]:
                    if temp_matrix.schedules[date].staff_of[time][section] is not None:
                        temp_staff = temp_matrix.schedules[date].staff_of[time][section]
                        if section in (Section.sEfree, Section.sIfree, Section.extras):
                            real_staff = [get_staff_by_name(staff.name) for staff in temp_staff]
                            temp_matrix.schedules[date].staff_of[time][section] = real_staff
                        else:
                            real_staff = get_staff_by_name(temp_staff.name)
                            temp_matrix.schedules[date].staff_of[time][section] = real_staff
        return temp_matrix

    def assign_30591(self): # 30591を割り当て
        # 山本：火水木の日勤30591、日の夜勤30596
        staff = get_staff_by_name("Yamamoto")
        for date in self.calendar:
            if date.weekday() in (1, 2, 3):  # Tuesday, Wednesday, Thursday
                self.schedules[date].assign(Time.day, Section.s30591, staff)
            if date.weekday() == 6:  # Sunday
                self.schedules[date].assign(Time.night, Section.s30596, staff)
        # 浅田：ほかの平日日勤30591
        staff = get_staff_by_name("Asada")
        for date in self.calendar:
            if date.weekday() < 5 and self.schedules[date].staff_of[Time.day][Section.s30591] is None:
                self.schedules[date].assign(Time.day, Section.s30591, staff)
    # 30596, 30597を4日単位で割り当て
    def assign_30596(self):
        temp_work_count = {staff.name: staff.work_count for staff in staffs}
        start_date = first_date            
        temp_matrix = self.copy_matrix()
        complete_flag = False
        for _ in range(100):
            if start_date > last_date:
                complete_flag = True
                break
            else:
                print(f"\r...30596 assigned in {_ + 1}", end="")
                staff_list = [staff for staff in staffs if staff.name in icu_staff_name]
                block_assigned = False
                while len(staff_list) > 0 :
                    staff = random_min_count(staff_list)
                    j = 4
                    can_assign = True
                    # 初日前日30597に配置できるか
                    if start_date != first_date:
                        previous_date = start_date - datetime.timedelta(days=1)
                        day_assignable, night_assignable = temp_matrix.daily_assignable_staffs(previous_date)
                        if staff not in night_assignable:
                            can_assign = False
                            break
                    # 連続4日＋最終日夜勤可能か
                    for i in range(4):
                        check_date = start_date + datetime.timedelta(days=i)
                        # 最終日からはみ出す例外処理
                        if check_date > last_date:
                            j = i
                            complete_flag = True
                            break
                        day_assignable, night_assignable = temp_matrix.daily_assignable_staffs(check_date)
                        if staff not in day_assignable or (i == 3 and staff not in night_assignable):
                            can_assign = False
                            break
                    # 前日30597＋連続4日＋最終日夜勤可能なとき割り当て
                    if can_assign:
                        if start_date != first_date:
                            previous_date = start_date - datetime.timedelta(days=1)
                            temp_matrix.schedules[previous_date].assign(Time.day, Section.s30597, staff)
                        for i in range(j):
                            assign_date = start_date + datetime.timedelta(days=i)
                            temp_matrix.schedules[assign_date].assign(Time.day, Section.s30596, staff)
                            if i == 3:
                                if self.schedules[assign_date].staff_of[Time.night][Section.s30596] is None:
                                    temp_matrix.schedules[assign_date].assign(Time.night, Section.s30596, staff)
                        start_date += datetime.timedelta(days=j)
                        block_assigned = True
                        break
                    # 可能でない時次のスタッフ、ただし完成したらフラグ
                    else:
                        staff_list.remove(staff)
                if complete_flag:
                    break
                if not block_assigned: # assign可能なstaffsが尽きる→初期化して初日からやりなおし
                    temp_matrix = self.copy_matrix()
                    for staff in staffs:
                        staff.work_count = temp_work_count[staff.name]
                    start_date = first_date
        if complete_flag:
            self.schedules = temp_matrix.schedules
        return complete_flag
    # 30594を4日単位で割り当て
    def assign_30594(self):
        temp_work_count = {staff.name: staff.work_count for staff in staffs}
        temp_matrix = self.copy_matrix()
        start_date = first_date
        complete_flag = False
        for _ in range(100):
            if start_date > last_date:
                complete_flag = True
                break
            else:
                print(f"\r...30594 assigned in {_ + 1}", end="")
                staff_list = [staff for staff in staffs if staff.name in eicu_staff_name]
                block_assigned = False
                while len(staff_list) > 0 :
                    staff = random_min_count(staff_list)
                    j = 4
                    can_assign = True
                    # 初日前日Efreeに配置できるか
                    if start_date != first_date:
                        previous_date = start_date - datetime.timedelta(days=1)
                        day_assignable, night_assignable = temp_matrix.daily_assignable_staffs(previous_date)
                        if staff not in night_assignable:
                            can_assign = False
                            break
                    # 連続4日可能＋最終日夜勤可能か
                    for i in range(4):
                        check_date = start_date + datetime.timedelta(days=i)
                        # 最終日からはみ出す例外処理
                        if check_date > last_date:
                            j = i
                            complete_flag = True
                            break
                        day_assignable, night_assignable = temp_matrix.daily_assignable_staffs(check_date)
                        if staff not in day_assignable or (i == 3 and staff not in night_assignable):
                            can_assign = False
                            break
                    # 連続4日可能なとき割り当て、最終日は5年目以降なら30595
                    if can_assign:
                        if start_date != first_date:
                            previous_date = start_date - datetime.timedelta(days=1)
                            temp_matrix.schedules[previous_date].assign(Time.day, Section.sEfree, staff)
                        for i in range(j):
                            assign_date = start_date + datetime.timedelta(days=i)
                            temp_matrix.schedules[assign_date].assign(Time.day, Section.s30594, staff)
                            if i == 3:
                                if staff.rank >= 5:
                                    temp_matrix.schedules[assign_date].assign(Time.night, Section.s30595, staff)
                                else:
                                    temp_matrix.schedules[assign_date].assign(Time.night, Section.s30599, staff)
                        start_date += datetime.timedelta(days=j)
                        block_assigned = True
                        break
                    # 可能でない時次のスタッフ、ただし完成したらフラグ
                    else:
                        staff_list.remove(staff)
                if complete_flag:
                    break
                if not block_assigned:
                    temp_matrix = self.copy_matrix()
                    for staff in staffs:
                        staff.work_count = temp_work_count[staff.name]
                    start_date = first_date
        if complete_flag:
            self.schedules = temp_matrix.schedules
        return complete_flag
    # 夜勤を596-595-599の順に割り当て
    def assign_nightshifts(self):
        temp_work_count = {staff.name: staff.work_count for staff in staffs}
        for _ in range(100):
            # スケジュール表、管理フラグ、work_countの初期化
            print(f"\r...night_shift assigned in {_ + 1}", end="")
            temp_matrix = self.copy_matrix()
            incomplete_flag = False
            for section in (Section.s30596, Section.s30595, Section.s30599):
                section_staffs = get_staff_by_section(section)
                for date in self.calendar:
                    # 既に割り振られてる場合はスキップ
                    if temp_matrix.schedules[date].staff_of[Time.night][section] is not None:
                        continue
                    daily_staffs = [staff for staff in section_staffs if staff in temp_matrix.daily_assignable_staffs(date)[1]]
                    if len(daily_staffs) > 0:
                        staff = random_min_count(daily_staffs)
                        temp_matrix.schedules[date].assign(Time.night, section, staff)
                    else:
                        incomplete_flag = True
                        break
                if incomplete_flag == True:
                    break
            if incomplete_flag == True:
                for staff in staffs:
                        staff.work_count = temp_work_count[staff.name]
                continue
            else:
                self.schedules = temp_matrix.schedules
                break
        return not incomplete_flag
    # 院生+浅田夜勤を追加
    def swap_nightshifts(self):
        # 高井、水野が30596、佐藤拓、田上が30595、と浅田
        help_staffs = [get_staff_by_name(name) for name in ("Asada", "Tagami", "SatoTaku", "Takai", "Mizuno")]
        for staff in help_staffs:
            if staff.name in ("Asada", "Takai"):
                section = Section.s30596
            else:
                section = Section.s30595
            staff_count = 0
            for _ in range(30):
                random_date = random.choice(self.calendar)
                if staff not in self.daily_assignable_staffs(random_date, include_phd = True)[1]:# 配置不能日ならスキップ
                    continue
                swapping_staff = self.schedules[random_date].staff_of[Time.night][section]
                if swapping_staff.name in ("Yamamoto", "Asada", "Tagami", "SatoTaku", "Takai", "Mizuno"): # 夜勤＝山本、もしくは既に交代した浅田＋院生ならスキップ
                    continue
                swapping_staff.work_count -= 1.5
                self.schedules[random_date].assign(Time.night, section, staff)
                # print(f"{random_date.strftime('%m-%d')} {section.name}:{swapping_staff.name} -> {staff.name}")
                staff_count += 1
                if staff_count == 3 and staff.name != "Asada" or staff_count == 4: # 浅田先生だけ夜勤4回
                    break
                if _ == 30:
                    print(f"cannnot swap {staff}")
    # 30595, 30599を順に割り当て
    def assign_day_ER(self):
        temp_work_count = {staff.name: staff.work_count for staff in staffs}
        for _ in range(100):
            print(f"\r...day_ER assigned in {_ + 1}", end="")
            # スケジュール表、管理フラグ、work_countの初期化
            temp_matrix = self.copy_matrix()
            incomplete_flag = False
            for section in (Section.s30595, Section.s30599):
                section_staffs = get_staff_by_section(section)
                for date in self.calendar:
                    daily_staffs = [staff for staff in section_staffs if staff in temp_matrix.daily_assignable_staffs(date)[0]]
                    if len(daily_staffs) > 0:
                        staff = random_min_count(daily_staffs)
                        temp_matrix.schedules[date].assign(Time.day, section, staff)
                    else:
                        incomplete_flag = True
                        print(f"failed to assign {section} on {date}")
                        break
                if incomplete_flag == True:
                    break
            if incomplete_flag == True:
                for staff in staffs:
                        staff.work_count = temp_work_count[staff.name]
                continue
            else:
                self.schedules = temp_matrix.schedules
                break
        return not incomplete_flag
    # 外勤を割り当て
    def assign_extras(self):
        for _ in range(100):
            print(f"\r...extra assigned in {_ + 1}", end="")
            # スケジュール表、管理フラグ、work_countの初期化
            temp_matrix = self.copy_matrix()
            incomplete_flag = False
            for date in self.calendar:
                # 台東（土日、3-5年）に川田、川上、野田、松山、諏江、池上、堂園、佐藤一
                if date.weekday() in (5, 6):
                    staff_list = [staff for staff in staffs if staff.name in ("Kawada", "Kawakami", "Noda", "Matuyama", "Sue_", "Ikegami", "Dozono", "SatoKazu") and staff in temp_matrix.daily_assignable_staffs(date)[1]]
                    if len(staff_list) > 0:
                        staff = random_min_count(staff_list, extra_flag = True)
                        temp_matrix.schedules[date].assign(Time.extra, Section.taitou, staff)
                    else:
                        incomplete_flag = True
                        break
                # 千葉徳（月、3-5年）に川田、川上、野田、松山、諏江、池上、堂園、佐藤一
                if date.weekday() == 0:
                    staff_list = [staff for staff in staffs if staff.name in ("Kawada", "Kawakami", "Noda", "Matuyama", "Sue_", "Ikegami", "Dozono", "SatoKazu") and staff in temp_matrix.daily_assignable_staffs(date)[0]]
                    if len(staff_list) > 0:
                        staff = random_min_count(staff_list, extra_flag = True)
                        temp_matrix.schedules[date].assign(Time.extra, Section.chibat, staff)
                    else:
                        incomplete_flag = True
                        break
                # 大森（月火木、6-8年）に木村、有田、中野、佐藤悠、高井、佐藤拓
                if date.weekday() in (0, 1, 3):
                    staff_list = [staff for staff in staffs if staff.name in ("Kimura", "Arita", "Nakano", "SatoYuko", "Takai", "SatoTaku") and staff in temp_matrix.daily_assignable_staffs(date)[0]]
                    if len(staff_list) > 0:
                        staff = random_min_count(staff_list, extra_flag = True)
                        temp_matrix.schedules[date].assign(Time.extra, Section.oomori, staff)
                    else:
                        incomplete_flag = True
                        break
                # 苑田（火木、3-4年）に川田、川上、野田、松山、諏江、池上
                if date.weekday() in (1, 3):
                    staff_list = [staff for staff in staffs if staff.name in ("Kawada", "Kawakami", "Noda", "Matuyama", "Sue_", "Ikegami") and staff in temp_matrix.daily_assignable_staffs(date)[0]]
                    if len(staff_list) > 0:
                        staff = random_min_count(staff_list, extra_flag = True)
                        temp_matrix.schedules[date].assign(Time.extra, Section.sonoda, staff)
                    else:
                        incomplete_flag = True
                        break
                # 帝京（月金、5-8年）に堂園、佐藤一、木村、有田、中野、佐藤悠
                if date.weekday() in (0, 4):
                    staff_list = [staff for staff in staffs if staff.name in ("Dozono", "SatoKazu", "Kimura", "Arita", "Nakano", "SatoYuko") and staff in temp_matrix.daily_assignable_staffs(date)[0]]
                    if len(staff_list) > 0:
                        staff = random_min_count(staff_list, extra_flag = True)
                        temp_matrix.schedules[date].assign(Time.extra, Section.teikyo, staff)
                    else:
                        incomplete_flag = True
                        break
                # 三井（水金）に水＝堀江、金＝山本、あと高井をランダム
                if date.weekday() == 2:
                    staff = get_staff_by_name("Horie")
                    if staff not in temp_matrix.daily_assignable_staffs(date)[0]:
                        staff = get_staff_by_name("Takai")
                        if staff not in temp_matrix.daily_assignable_staffs(date)[0]:
                            incomplete_flag = True
                            break
                    temp_matrix.schedules[date].assign(Time.extra, Section.mitsui, staff)
                if date.weekday() == 4:
                    staff = get_staff_by_name("Yamamoto")
                    if staff not in temp_matrix.daily_assignable_staffs(date)[0]:
                        staff = get_staff_by_name("Takai")
                        if staff not in temp_matrix.daily_assignable_staffs(date)[0]:
                            incomplete_flag = True
                            break
                    temp_matrix.schedules[date].assign(Time.extra, Section.mitsui, staff)
            if incomplete_flag == True:
                for staff in staffs:
                        staff.extra_work_count = 0
                continue
            else:
                self.schedules = temp_matrix.schedules
                break
        return not incomplete_flag

    # Efree, 30597を割り当て
    def assign_freestaffs(self):
        temp_matrix = self.copy_matrix()
        section_staffs = get_staff_by_section(Section.s30597)
        for date in self.calendar:
            # 既に割り振られてる場合はスキップ
            if temp_matrix.schedules[date].staff_of[Time.day][Section.s30597] is not None:
                continue
            daily_staffs = [staff for staff in section_staffs if staff in temp_matrix.daily_assignable_staffs(date)[0]]
            if len(daily_staffs) > 0:
                staff = random_min_count(daily_staffs)
                temp_matrix.schedules[date].assign(Time.day, Section.s30597, staff)
        section_staffs = get_staff_by_section(Section.sEfree)
        for date in self.calendar:
            if len(temp_matrix.schedules[date].staff_of[Time.day][Section.sEfree]) > 0:
                continue
            daily_staffs = [staff for staff in section_staffs if staff in temp_matrix.daily_assignable_staffs(date)[0]]
            if len(daily_staffs) > 0:
                staff = random_min_count(daily_staffs)
                temp_matrix.schedules[date].assign(Time.day, Section.sEfree, staff)
        self.schedules = temp_matrix.schedules

    '''
    def all_sections_assigned(self, date:datetime.date) -> bool:
        extra_work = True
        if date.weekday() == 0 and not all(self.staff_of[Time.extra][section] is not None for section in (Section.teikyo, Section.oomori, Section.chibat)):
            extra_work = False
        elif date.weekday() == 1 and not all(self.staff_of[Time.extra][section] is not None for section in (Section.sonoda, Section.oomori)):
            extra_work = False
        elif date.weekday() == 2 and self.staff_of[Time.extra][Section.mitsui] is None:
            extra_work = False
        elif date.weekday() == 3 and not all(self.staff_of[Time.extra][section] is not None for section in (Section.sonoda, Section.oomori)):
            extra_work = False
        elif date.weekday() == 4 and not all(self.staff_of[Time.extra][section] is not None for section in (Section.teikyo, Section.oomori)):
            extra_work = False
        elif date.weekday() == 5 and self.staff_of[Time.extra][Section.taitou] is None:
            extra_work = False
        elif date.weekday() == 6 and self.staff_of[Time.extra][Section.taitou] is None:
            extra_work = False

        return all(self.staff_of[Time.day][section] is not None for section in (Section.s30595, Section.s30599, Section.s30594, Section.s30596)) and\
            all(self.staff_of[Time.night][section] is not None for section in (Section.s30595, Section.s30599, Section.s30596)) and extra_work
    '''

def main():
    for i in range(100):
        print(f"processing {i+1} ...")
        schedule_matrix = Schedule_matrix()
        for staff in staffs:
            staff.work_count = 0
            staff.extra_work_count = 0
        schedule_matrix.assign_30591()
        flag = schedule_matrix.assign_30596()
        print("")
        if not flag:
            continue
        flag = schedule_matrix.assign_30594()
        print("")
        if not flag:
            continue
        flag = schedule_matrix.assign_nightshifts()
        print("")
        if not flag:
            continue
        schedule_matrix.swap_nightshifts()
        flag = schedule_matrix.assign_extras()
        print("")
        if not flag:
            continue
        flag = schedule_matrix.assign_day_ER()
        print("")
        if not flag:
            continue
        schedule_matrix.assign_freestaffs()
        break

    indexes = ["Date", "D_30591", "D_30595", "D_30599", "D_30594", "D_Efree", "D_30596", "D_30597", "D_Ifree", "N_30595", "N_30599", "N_30596"]
    for index in indexes:
        print(f"{index}", end="\t    ")
    print("")
    for entry in schedule_matrix.schedules.values():
        output = [f"{entry.date.strftime('%m-%d')}"]
        output.append(f"{entry.staff_of[Time.day][Section.s30591].name if entry.staff_of[Time.day][Section.s30591] else 'None'}")
        output.append(f"{entry.staff_of[Time.day][Section.s30595].name if entry.staff_of[Time.day][Section.s30595] else 'None'}")
        output.append(f"{entry.staff_of[Time.day][Section.s30599].name if entry.staff_of[Time.day][Section.s30599] else 'None'}")
        output.append(f"{entry.staff_of[Time.day][Section.s30594].name if entry.staff_of[Time.day][Section.s30594] else 'None'}")
        output.append(f"{' '.join([staff.name for staff in entry.staff_of[Time.day][Section.sEfree]]) if entry.staff_of[Time.day][Section.sEfree] else 'None'}")
        output.append(f"{entry.staff_of[Time.day][Section.s30596].name if entry.staff_of[Time.day][Section.s30596] else 'None'}")
        output.append(f"{entry.staff_of[Time.day][Section.s30597].name if entry.staff_of[Time.day][Section.s30597] else 'None'}")
        output.append(f"{' '.join([staff.name for staff in entry.staff_of[Time.day][Section.sIfree]]) if entry.staff_of[Time.day][Section.sIfree] else 'None'}")
        output.append(f"{entry.staff_of[Time.night][Section.s30595].name if entry.staff_of[Time.night][Section.s30595] else 'None'}")
        output.append(f"{entry.staff_of[Time.night][Section.s30599].name if entry.staff_of[Time.night][Section.s30599] else 'None'}")
        output.append(f"{entry.staff_of[Time.night][Section.s30596].name if entry.staff_of[Time.night][Section.s30596] else 'None'}")
        print("\t    ".join(output))
    print("")
    indexes = ["Date", "Sonoda", "Teikyo", "Mitsui", "Oomori", "Taitou", "Chibatok", "Extras"]
    for index in indexes:
        print(f"{index}", end="\t    ")
    print("")
    for entry in schedule_matrix.schedules.values():
        output = [f"{entry.date.strftime('%m-%d')}"]
        output.append(f"{entry.staff_of[Time.extra][Section.sonoda].name if entry.staff_of[Time.extra][Section.sonoda] else '\t'}")
        output.append(f"{entry.staff_of[Time.extra][Section.teikyo].name if entry.staff_of[Time.extra][Section.teikyo] else '\t'}")
        output.append(f"{entry.staff_of[Time.extra][Section.mitsui].name if entry.staff_of[Time.extra][Section.mitsui] else '\t'}")
        output.append(f"{entry.staff_of[Time.extra][Section.oomori].name if entry.staff_of[Time.extra][Section.oomori] else '\t'}")
        output.append(f"{entry.staff_of[Time.extra][Section.taitou].name if entry.staff_of[Time.extra][Section.taitou] else '\t'}")
        output.append(f"{entry.staff_of[Time.extra][Section.chibat].name if entry.staff_of[Time.extra][Section.chibat] else '\t'}")
        output.append(f"{' '.join([staff.name for staff in entry.staff_of[Time.extra][Section.extras]]) if entry.staff_of[Time.extra][Section.extras] else 'None'}")
        print("\t    ".join(output))
    
    for staff in staffs:
        print(f"{staff.name} works* {staff.work_count}", end="")
        actual_workcount = 0
        for date in schedule_matrix.calendar:
            for section in (Section.s30591, Section.s30595, Section.s30599, Section.s30594, Section.s30596, Section.s30597):
                if schedule_matrix.schedules[date].staff_of[Time.day][section] == staff:
                    actual_workcount += 1
            for section in (Section.sIfree, Section.sEfree):
                for listed_staff in schedule_matrix.schedules[date].staff_of[Time.day][section]:
                    if staff == listed_staff:
                        actual_workcount += 1
            for section in (Section.s30596, Section.s30595, Section.s30599):
                if schedule_matrix.schedules[date].staff_of[Time.night][section] == staff:
                    actual_workcount += 1.5
        print(f"({actual_workcount}), extra={staff.extra_work_count}")
main()