import random
import datetime
import copy
from copy import deepcopy
from enum import Enum

class Time(Enum):
    day = "Day"
    night = "Night"
    extra = "Extra"

class Section(Enum):
    s30591 = "30591"
    s30595 = "30595"
    s30599 = "30599"
    s30596 = "30596"
    s30597 = "30597"
    sIfree = "Ifree"
    s30594 = '30594'
    sEfree = "Efree"

    sonoda = "Sonoda"
    teikyo = "Teikyo"
    mitsui = "Mitsui"
    oomori = "Oomori"
    taitou = "Taitou"
    chibat = "Chibatoku"
    extras = "Kojin_extras"
    
# カレンダーの用意
first_date = datetime.date(2024,7,1)
last_date = datetime.date(2024,7,31)

class Staff():
    def __init__(self, name, rank, is_phd = False, assignable_section = None, icu_team = False, ng_request = None):
        self.name = name
        self.rank = rank
        self.is_phd = is_phd
        if assignable_section is None:
            assignable_section = []
        self.assignable_section = assignable_section
        self.icu_team = icu_team
        if ng_request is None:
            ng_request = []
        self.ng_request = ng_request
    
# スタッフ名簿
staffs = [
    Staff("Asada", rank=16,   assignable_section = [Section.s30591, Section.s30595, Section.s30596], icu_team = True, ng_request =[]),
    Staff("Yamamoto", rank=16,   assignable_section = [Section.s30591, Section.s30595, Section.s30596], icu_team = True, ng_request =[]),

    Staff("SatoYuko", rank= 8,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Nakano", rank= 6,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Kimura", rank= 6,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Arita", rank= 6,    assignable_section = [Section.s30595, Section.s30599, Section.s30594, Section.sEfree], ng_request =[]),
    Staff("SatoKazu", rank= 5,    assignable_section = [Section.s30595, Section.s30599, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
    Staff("Dozono", rank= 5,    assignable_section = [Section.s30595, Section.s30599, Section.s30594, Section.sEfree, Section.s30596, Section.s30597, Section.sIfree], icu_team = True, ng_request =[]),
   
]

def get_staff(name):
    return next((staff for staff in staffs if staff.name == name), None)

class Daily_assignments:
    def __init__(self, date:datetime.date) -> None:
        self.date = date
        self.daily_assignment = {
            Time.day    :{
                        Section.s30591: None,
                        Section.s30595: None,
                        Section.s30599: None,
                        Section.s30596: None,
                        Section.s30597: None,
                        Section.sIfree: [],
                        Section.s30594: None,
                        Section.sEfree: []
            },
            Time.night  :{
                        Section.s30595: None,
                        Section.s30599: None,
                        Section.s30596: None
            },
            Time.extra  :{
                        Section.sonoda: None,
                        Section.teikyo: None,
                        Section.mitsui: None,
                        Section.oomori: None,
                        Section.taitou: None,
                        Section.chibat: None,
                        Section.extras: []
            }
        }

    def all_sections_assigned(self, date:datetime.date) -> bool:
        extra_work = True
        if date.weekday() == 0 and not all(self.daily_assignment[Time.extra][section] is not None for section in (Section.teikyo, Section.oomori, Section.chibat)):
            extra_work = False
        elif date.weekday() == 1 and not all(self.daily_assignment[Time.extra][section] is not None for section in (Section.sonoda, Section.oomori)):
            extra_work = False
        elif date.weekday() == 2 and self.daily_assignment[Time.extra][Section.mitsui] is None:
            extra_work = False
        elif date.weekday() == 3 and not all(self.daily_assignment[Time.extra][section] is not None for section in (Section.sonoda, Section.oomori)):
            extra_work = False
        elif date.weekday() == 4 and not all(self.daily_assignment[Time.extra][section] is not None for section in (Section.teikyo, Section.oomori)):
            extra_work = False
        elif date.weekday() == 5 and self.daily_assignment[Time.extra][Section.taitou] is None:
            extra_work = False
        elif date.weekday() == 6 and self.daily_assignment[Time.extra][Section.taitou] is None:
            extra_work = False

        return all(self.daily_assignment[Time.day][section] is not None for section in (Section.s30595, Section.s30599, Section.s30594, Section.s30596)) and\
            all(self.daily_assignment[Time.night][section] is not None for section in (Section.s30595, Section.s30599, Section.s30596)) and extra_work
    
    def assign(self, time:Time, section:Section, staff:Staff):
        self.daily_assignment[time][section] = staff

class Schedule_matrix:
    def __init__(self) -> None:
        self.calendar = []
        self.schedules = {}
        current_date = first_date
        while current_date <= last_date:
            self.calendar.append(current_date)
            daily_assignments = Daily_assignments(current_date)
            self.schedules[current_date] = daily_assignments
            current_date += datetime.timedelta(days=1)

    def is_weekday(self, date)->bool:
        return date.weekday() < 5
    
    def schedule_for(self, date):
        return self.schedules.get(date)
    
    def daily_assignable_staffs(self, date):
        daily_assignable_staffs = []
        day_assignable = []
        night_assignable = []
        next_date = date + datetime.timedelta(days = 1)

        # 勤務不可日とその前日夜勤を除外して勤務可能者リストを作成
        for staff in staffs:
            if date not in staff.ng_request:
                day_assignable.append(staff)
                if next_date not in staff.ng_request:
                    night_assignable.append(staff)

        # 前日夜勤者リストを作成
        previous_night_staffs = []
        if date != first_date:
            previous_day = date - datetime.timedelta(days = 1)
            previous_day_schedule = self.schedule_for(previous_day)
            for section in (Section.s30595, Section.s30599, Section.s30596):
                staff = previous_day_schedule.daily_assignment[Time.night][section]
                if staff:
                    previous_night_staffs.append(staff)
        # 前日夜勤者を勤務可能者リストから除外
        for staff in previous_night_staffs:
            if staff in day_assignable:
                day_assignable.remove(staff)
            if staff in night_assignable:
                night_assignable.remove(staff)

        daily_assignable_staffs = [day_assignable, night_assignable]
        return daily_assignable_staffs

    # 30591を割り当て
    def assign_30591(self):
        # 山本：火水木の日勤30591、日の夜勤30596
        staff = get_staff("Yamamoto")
        for date in self.calendar:
            if date.weekday() in (1, 2, 3):  # Tuesday, Wednesday, Thursday
                self.schedule_for(date).assign(Time.day, Section.s30591, staff)
            if date.weekday() == 6:  # Sunday
                self.schedule_for(date).assign(Time.night, Section.s30596, staff)
        # 浅田：ほかの平日日勤30591
        staff = get_staff("Asada")
        for date in self.calendar:
            if date.weekday() < 5:
                if self.schedule_for(date).daily_assignment[Time.day][Section.s30591] is None:
                    self.schedule_for(date).assign(Time.day, Section.s30591, staff)

    # 30596, 30597を連続で割り当て
    def assign_30596(self):
        # 30596可能なメンバーは佐藤悠、佐藤一、中野、堂園、木村
        icu_staffs = [get_staff(name) for name in ("SatoYuko", "SatoKazu", "Nakano", "Dozono", "Kimura")]
        start_date = first_date
            
        temp_schedules = Schedule_matrix()
        temp_schedules.assign_30591()
        
        complete_flag = False
        for _ in range(100):
            if start_date > last_date:
                complete_flag = True
                break
            else:
                staff_list = copy.copy(icu_staffs)
                block_assigned = False
                while len(staff_list) > 0 :
                    staff = random.choice(staff_list)
                    j = 4
                    can_assign = True

                    # 初日前日30597に配置できるか
                    if start_date != first_date:
                        previous_date = start_date - datetime.timedelta(days=1)
                        day_assignable, night_assignable = temp_schedules.daily_assignable_staffs(previous_date)
                        if staff not in night_assignable:
                            can_assign = False
                            break
                    # 連続4日＋最終日夜勤可能か
                    for i in range(4):
                        check_date = start_date + datetime.timedelta(days=i)
                        # 最終日からはみ出す例外処理
                        if check_date > last_date:
                            j = i
                            complete_flag = True
                            break
                        day_assignable, night_assignable = temp_schedules.daily_assignable_staffs(check_date)

                        if staff not in day_assignable or (i == 3 and staff not in night_assignable):
                            can_assign = False
                            break
                    # 前日30597＋連続4日＋最終日夜勤可能なとき割り当て
                    if can_assign:
                        if start_date != first_date:
                            previous_date = start_date - datetime.timedelta(days=1)
                            temp_schedules.schedule_for(previous_date)[Time.day][Section.s30597] = staff
                        for i in range(j):
                            assign_date = start_date + datetime.timedelta(days=i)
                            temp_schedules.schedule_for(assign_date)[Time.day][Section.s30596] = staff
                            if i == 3:
                                temp_schedules.schedule_for(assign_date)[Time.night][Section.s30596] = staff
                            start_date += datetime.timedelta(days=j)
                            block_assigned = True
                            break
                    # 可能でない時次のスタッフ、ただし完成したらフラグ
                    else:
                        staff_list.remove(staff)
                
                if complete_flag:
                    break
                if not block_assigned:
                    temp_schedules = Schedule_matrix()
                    temp_schedules.assign_30591()
        
        if complete_flag:
            self.schedules = temp_schedules.schedules
    

    # 30594を連続で割り当て
    # 夜勤を割り当て
    # 院生から夜勤を割り当て
    # 外勤を割り当て
    # Efree, Ifreeを割り当て
    
def main():
    schedule_matrix = Schedule_matrix()
    schedule_matrix.assign_30591()
    # schedule_matrix.assign_30596()

    indexes = ["Date", "D_30591", "D_30595", "D_30599", "D_30594", "D_Efree", "D_30596", "D_30597", "D_Ifree", "N_30595", "N_30599", "N_30596"]
    for index in indexes:
        print(f"{index}", end="\t")
    print("")
    for entry in schedule_matrix.schedules.values():
        output = [f"{entry.date.strftime('%m-%d')}"]
        output.append(f"{entry.daily_assignment[Time.day][Section.s30591].name if entry.daily_assignment[Time.day][Section.s30591] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.day][Section.s30595].name if entry.daily_assignment[Time.day][Section.s30595] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.day][Section.s30599].name if entry.daily_assignment[Time.day][Section.s30599] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.day][Section.s30594].name if entry.daily_assignment[Time.day][Section.s30594] else 'None'}")
        output.append(f"{' '.join([staff.name for staff in entry.daily_assignment[Time.day][Section.sEfree]]) if entry.daily_assignment[Time.day][Section.sEfree] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.day][Section.s30596].name if entry.daily_assignment[Time.day][Section.s30596] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.day][Section.s30597].name if entry.daily_assignment[Time.day][Section.s30597] else 'None'}")
        output.append(f"{' '.join([staff.name for staff in entry.daily_assignment[Time.day][Section.sIfree]]) if entry.daily_assignment[Time.day][Section.sIfree] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.night][Section.s30595].name if entry.daily_assignment[Time.night][Section.s30595] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.night][Section.s30599].name if entry.daily_assignment[Time.night][Section.s30599] else 'None'}")
        output.append(f"{entry.daily_assignment[Time.night][Section.s30596].name if entry.daily_assignment[Time.night][Section.s30596] else 'None'}")
        print("\t".join(output))

main()