import datetime
import calendar
import random
import statistics
from enum import Enum
from copy import deepcopy
from collections import defaultdict
from operator import itemgetter

class TargetYearMonth:
    def __init__(self, year: int, month: int):
        self.year = year
        self.month = month
target_ym = TargetYearMonth(year = 2024, month = 7)
target_cal = [datetime.date(target_ym.year, target_ym.month, day) for day in range(1, calendar.monthrange(target_ym.year, target_ym.month)[1] + 1)]

class Section(Enum):
    OFF = 'OFF_'
    ER = 'ER__'
    NER = 'NER_'
    ICU = 'ICU_'
    EICU = 'EICU'
    Paidoff = 'Poff'
    NG_A = 'NG_A'
    NG_B = 'NG_B'
class Role(Enum):
    ER = 'ER'
    ICU = 'ICU'
class Request:
    def __init__(self, name: str, role: Role, paidoff_list: list, ng_a: list, ng_b: list):
        self.name = name
        self.role = role
        self.paidoff_list = [datetime.date(target_ym.year, target_ym.month, day) for day in paidoff_list] if paidoff_list else []
        self.ng_a = [datetime.date(target_ym.year, target_ym.month, day) for day in ng_a] if ng_a else []
        self.ng_b = [datetime.date(target_ym.year, target_ym.month, day) for day in ng_b] if ng_b else []
############################################################################################################################
monthly_requests = [
    #       Name        Role        Paidoff     NG_absolute         NG_if_possible    
    Request("Takami",   Role.ICU,   [],         [3,12,19,25],       []),
    Request("Yuizono",  Role.ICU,   [7,28],     [12,19,29],         []),
    Request("Matsumoto",Role.ICU,   [],         [6,13,3,10,18],     []),
    Request("Shiraki",  Role.ICU,   [1,2],      [20,6,13],          []),
    Request("Koumoto",  Role.ICU,   [29,30],    [19,20,28],         []),
    Request("Sugimoto", Role.ER,    [13],       [5,6,7,26],         [27,28,29]),
    Request("Shimozaki",Role.ER,    [],         [4,5,6,13,19],      [21,28]),
    Request("Katsu",    Role.ER,    [],         [26,27,28,29,30],   []),
    Request("Tamaki",   Role.ER,    [],         [6,7,14,17,28],     []),
    Request("Kashibuchi",Role.ER,   [],         [3,31,6,15,20],     [27,28]),
    Request("Okuno",    Role.ER,    [],         [13,14,18,24],      []),
    Request("Ookura",   Role.ER,    [],         [21,28,29,30],      []),
    Request("Iwakawa",  Role.ER,    [],         [21],               []),
    Request("Mitsukuri",Role.ER,    [],         [5,6,21],           []),
    Request("Oogami",   Role.ER,    [],         [1,2,18,19,20,21],    [28]),
    Request("Ochi",     Role.ER,    [],         [6,14,20,27,28],    []),
    Request("Takeda",   Role.ER,    [],         [6,7,27,28,29],     []),
    Request("Ono",      Role.ER,    [],         [7,20,21,27,28],    [3,10,17,24]),
    Request("Hasegawa", Role.ER,    [],         [1,18,20,21,30,31],   [22,29]),
    Request("Emoto",    Role.ER,    [],         [13],               []),
]
target_counts = {
    "weekday": {
    Section.ICU: 3,
    Section.ER:  3,
    Section.NER: 3,
    Section.EICU:3
    },
    "weekend": {
    Section.ICU: 2,
    Section.ER:  3,
    Section.NER: 3,
    Section.EICU:3
    }
}
work_limit= {
    Role.ER: {
    Section.ER:  6,
    Section.NER: 5,
    Section.EICU:7
    },
    Role.ICU: {
    Section.ICU: 17,
    Section.NER: 3
    }
}

############################################################################################################################
class Intern_Schedule:
    def __init__(self, request: Request):
        self.request = request
        self.name = self.request.name
        self.role = self.request.role
        self.schedule = {date: Section.OFF for date in target_cal}
        for paidoff in self.request.paidoff_list:
            self.schedule[paidoff] = Section.Paidoff
        for ng_a in self.request.ng_a:
            self.schedule[ng_a] = Section.NG_A
        for ng_b in self.request.ng_b:
            self.schedule[ng_b] = Section.NG_B
        self.protoschedule = deepcopy(self.schedule)
        self.day_count = len(self.request.paidoff_list) # 最初から有休分を日勤数に計上しておく
        self.night_count = 0

    def is_off_on(self, date: datetime.date) -> bool:
        return self.schedule[date] in [Section.OFF, Section.Paidoff, Section.NG_A, Section.NG_B]
    
    def is_available_on(self, date: datetime.date) -> bool:
        return self.schedule[date] in [Section.OFF, Section.NG_B] \
            and (self.schedule[date - datetime.timedelta(days = 1)] != Section.NER if date != target_cal[0] else True)
    
    def is_available_for_ner_on(self, date: datetime.date) -> bool:
        return self.schedule[date]                                  in [Section.OFF, Section.NG_B] \
            and (self.schedule[date - datetime.timedelta(days = 1)] != Section.NER                 if date != target_cal[0] else True) \
            and (self.schedule[date + datetime.timedelta(days = 1)] in [Section.OFF, Section.NG_B] if date != target_cal[-1] else True)
            
    def is_valid_schedule(self)-> bool: # 禁則：6連勤以上または夜勤後に勤務/有休パターンを排除
        CONSEQUTIVE_WORK_LIMIT = 6
        count = 0
        for date in target_cal:
            if not self.is_off(date):
                count += 1
            else:
                count = 0
            if count >= CONSEQUTIVE_WORK_LIMIT:
                return False
        for date in target_cal[:-1]:
            next_date = date + datetime.timedelta(days = 1)
            if self.schedule[date] == Section.NER and self.schedule[next_date] not in (Section.OFF, Section.NG_B):
                return False
        return True

class Schedule_matrix():
    def __init__(self, monthly_requests):
        self.schedule_matrix = [Intern_Schedule(request) for request in monthly_requests]
    def calc_section_counts(self):
        section_counts_table = defaultdict(lambda: defaultdict(int))
        for intern in self.schedule_matrix:
            for date, section in intern.schedule.items():
                if section in (Section.NER, Section.ICU, Section.EICU, Section.ER):
                    section_counts_table[section][date] += 1
        return section_counts_table
    def ner_assignable_counts(self):
        ner_assinabble_counts = defaultdict(int)
        for date in target_cal:
            for intern in self.schedule_matrix:
                if intern.is_available_for_ner_on(date) and intern.night_count < work_limit[intern.role][Section.NER]:
                    ner_assinabble_counts[date] += 1
        return ner_assinabble_counts
    def assign_ner(self):
        #最低人数の割り当て
        ner_assignable_counts = self.ner_assignable_counts()
        for date, counts in ner_assignable_counts.items():
            if counts <= 3:
                print(f"NER assignable only {counts} interns on {date}")
        for _ in range(300):
            temp_matrix = deepcopy(self)
            complete_flag = True
            ner_assignable_counts = temp_matrix.ner_assignable_counts()
            ner_assignable_counts_sorted = sorted(ner_assignable_counts.items(), key=itemgetter(1))
            for date, count_not_used in ner_assignable_counts_sorted:
                # Role.ICUは同日1人までにしないと後で詰む
                assignable_list_from_er = [intern.name for intern in temp_matrix.schedule_matrix if intern.is_available_for_ner_on(date) and intern.night_count < work_limit[intern.role][Section.NER] and intern.role == Role.ER]
                assignable_list_from_icu = [intern.name for intern in temp_matrix.schedule_matrix if intern.is_available_for_ner_on(date) and intern.night_count < work_limit[intern.role][Section.NER] and intern.role == Role.ICU]
                assignable_list = assignable_list_from_er + ([random.choice(assignable_list_from_icu)] if assignable_list_from_icu else [])
                if len(assignable_list) < 2:
                    complete_flag = False
                    break
                is_weekday = "weekday" if date.weekday() < 5 else "weekend"
                ner_counts = target_counts[is_weekday][Section.NER]
                ner_counts = ner_counts if ner_counts <= len(assignable_list) else len(assignable_list)  #そもそも足りなければ減らす他ない
                intern_names = random.sample(assignable_list, ner_counts)
                for intern in temp_matrix.schedule_matrix:
                    if intern.name in intern_names:
                        intern.schedule[date] = Section.NER
                        intern.night_count += 1
            if complete_flag:
                print(f"NER assigned: {_+1} try", end="\t")
                self.schedule_matrix = temp_matrix.schedule_matrix
                break
        #夜勤上限まで追加
        for intern in self.schedule_matrix:
            while work_limit[intern.role][Section.NER] > intern.night_count:
                section_counts_table = self.calc_section_counts()
                counts_cal = sorted(section_counts_table[Section.NER].items(), key=itemgetter(1))
                for date, unused_counts in counts_cal:
                    if intern.is_available_for_ner_on(date):
                        intern.schedule[date] = Section.NER
                        intern.night_count += 1
                        break
    def day_assignable_counts(self, role):
        day_assinabble_counts = defaultdict(int)
        for date in target_cal:
            for intern in self.schedule_matrix:
                if intern.role == role and intern.is_available_on(date) \
                    and intern.day_count < (work_limit[intern.role][Section.ICU] if role == Role.ICU else work_limit[intern.role][Section.ER] + work_limit[intern.role][Section.EICU]):
                    day_assinabble_counts[date] += 1
        return day_assinabble_counts
    def assign_day(self):
        #最低人数の割り当て            
        for role in (Role.ICU, Role.ER):
            for _ in range(1000):
                temp_matrix = deepcopy(self)
                complete_flag = True
                day_assignable_counts = temp_matrix.day_assignable_counts(role)
                day_assignable_counts_sorted = sorted(day_assignable_counts.items(), key=itemgetter(1))
                for date, count_not_used in day_assignable_counts_sorted:
                    assignable_list = [intern.name for intern in temp_matrix.schedule_matrix if intern.role == role and intern.is_available_on(date) \
                        and intern.day_count < (work_limit[intern.role][Section.ICU] if role == Role.ICU else work_limit[intern.role][Section.ER] + work_limit[intern.role][Section.EICU])]
                    if len(assignable_list) < (1 if role == Role.ICU else 4):
                        complete_flag = False
                        break
                    is_weekday = "weekday" if date.weekday() < 5 else "weekend"
                    day_counts = target_counts[is_weekday][Section.ICU] if role == Role.ICU else target_counts[is_weekday][Section.ER] + target_counts[is_weekday][Section.EICU]
                    day_counts = day_counts if day_counts <= len(assignable_list) else len(assignable_list)  #そもそも足りなければ減らす他ない
                    intern_names = random.sample(assignable_list, day_counts)
                    for intern in temp_matrix.schedule_matrix:
                        if intern.name in intern_names:
                            intern.schedule[date] = Section.ICU if role == Role.ICU else Section.EICU
                            intern.day_count += 1
                if complete_flag:
                    print(f"day assigned for {role}: {_+1} try", end="\t")
                    self.schedule_matrix = temp_matrix.schedule_matrix
                    break
        # 上限まで追加
        for intern in self.schedule_matrix:
            while intern.day_count < (work_limit[intern.role][Section.ICU] if intern.role == Role.ICU else (work_limit[intern.role][Section.EICU] + work_limit[intern.role][Section.ER])):
                section_counts_table = self.calc_section_counts()
                counts_cal = sorted(section_counts_table[Section.ICU].items(), key=itemgetter(1)) if intern.role == Role.ICU else sorted(section_counts_table[Section.EICU].items(), key=itemgetter(1))
                assigned = False
                for date, unused_counts in counts_cal:
                    if intern.is_available_on(date):
                        intern.schedule[date] = Section.ICU if intern.role == Role.ICU else Section.EICU
                        intern.day_count += 1
                        assigned = True
                        break                
                if not assigned:
                    break
    def swap_er_eicu_1(self): # 1コ飛び以上のEICU勤務をまずER勤務に振替え
        for intern in self.schedule_matrix:
            if intern.role == Role.ER:
                day_work_list = [date for date in target_cal if intern.schedule[date] == Section.EICU]
                for date in day_work_list:
                    is_not_eicu_minus_2 = intern.schedule[date - datetime.timedelta(days = 2)] != Section.EICU if date - datetime.timedelta(days = 2) in target_cal else True
                    is_not_eicu_minus_1 = intern.schedule[date - datetime.timedelta(days = 1)] != Section.EICU if date - datetime.timedelta(days = 1) in target_cal else True
                    is_not_eicu_plus_1 = intern.schedule[date + datetime.timedelta(days = 1)] != Section.EICU if date + datetime.timedelta(days = 1) in target_cal else True                   
                    is_not_eicu_plus_2 = intern.schedule[date + datetime.timedelta(days = 2)] != Section.EICU if date + datetime.timedelta(days = 2) in target_cal else True
                    if all([is_not_eicu_minus_1, is_not_eicu_minus_2, is_not_eicu_plus_1, is_not_eicu_plus_2]):
                        intern.schedule[date] = Section.ER
    def swap_er_eicu_2(self): # ER足りないところに1コ飛びのEICU勤務をER勤務に振替え
        section_counts_table = self.calc_section_counts()
        er_counts_table = section_counts_table[Section.ER]
        eicu_counts_table = section_counts_table[Section.EICU]
        for date in target_cal:
            daily_er_counts = er_counts_table[date]
            daily_eicu_counts = eicu_counts_table[date]
            daily_added_counts = daily_er_counts + daily_eicu_counts
            min_er = 2 if daily_added_counts < 6 else 3
            if daily_er_counts < min_er:
                daily_diff = min_er - daily_er_counts
                daily_eicu_names = [intern.name for intern in self.schedule_matrix if intern.schedule[date] == Section.EICU]
                prior_daily_eicu_names = []
                for intern in self.schedule_matrix:
                    if intern.name in daily_eicu_names:
                        is_not_eicu_minus_1 = intern.schedule[date - datetime.timedelta(days = 1)] != Section.EICU if date - datetime.timedelta(days = 1) in target_cal else True
                        is_not_eicu_plus_1 = intern.schedule[date + datetime.timedelta(days = 1)] != Section.EICU if date + datetime.timedelta(days = 1) in target_cal else True
                        if all([is_not_eicu_minus_1, is_not_eicu_plus_1]):
                            prior_daily_eicu_names.append(intern.name)
                if prior_daily_eicu_names:
                    if len(prior_daily_eicu_names) >= daily_diff:
                        prior_daily_eicu_names = random.sample(prior_daily_eicu_names, daily_diff)
                    for intern in self.schedule_matrix:
                        if intern.name in prior_daily_eicu_names:
                            intern.schedule[date] = Section.ER
                            daily_diff -= 1
    def swap_er_eicu_3(self): # ER足りないところにとにかく補充
        section_counts_table = self.calc_section_counts()
        er_counts_table = section_counts_table[Section.ER]
        eicu_counts_table = section_counts_table[Section.EICU]
        for date in target_cal:
            daily_er_counts = er_counts_table[date]
            daily_eicu_counts = eicu_counts_table[date]
            daily_added_counts = daily_er_counts + daily_eicu_counts
            min_er = 2 if daily_added_counts < 6 else 3
            if daily_er_counts < min_er:
                daily_diff = min_er - daily_er_counts
                daily_eicu_name_counts = {}
                for intern in self.schedule_matrix:
                    if intern.schedule[date] == Section.EICU:
                        er_counts = len([date for date in target_cal if intern.schedule[date] == Section.ER])
                        daily_eicu_name_counts[intern.name] = er_counts + len(intern.request.paidoff_list)
                daily_eicu_name_counts = sorted(daily_eicu_name_counts.items(), key=itemgetter(1))
                for name, counts in daily_eicu_name_counts[:daily_diff]:
                    for intern in self.schedule_matrix:
                        if intern.name == name:
                            intern.schedule[date] = Section.ER
    def evaluator(self):
        section_filled_score = 0
        section_counts_table = self.calc_section_counts()
        for section in (Section.NER, Section.ICU, Section.EICU, Section.ER):
            for date in target_cal:
                is_weekday = "weekday" if date.weekday() < 5 else "weekend"
                target_count = target_counts[is_weekday][section]
                diff = max(target_count - section_counts_table[section][date], 0)
                section_filled_score += diff**2
        intern_satisfaction_scores = 0
        for intern in self.schedule_matrix:
            intern_satisfaction = len(intern.request.paidoff_list)**2
            intern_counts = defaultdict(int)
            for date in target_cal:
                intern_counts[intern.schedule[date]] += 1
            if intern_counts[Section.NG_B]:
                intern_satisfaction += intern_counts[Section.NG_B] * 5
            if intern.role == Role.ER:
                eicu_diff = work_limit[intern.role][Section.EICU] - intern_counts[Section.EICU]
                intern_satisfaction += eicu_diff ** 2
            intern_satisfaction_scores += intern_satisfaction
        return section_filled_score, intern_satisfaction_scores


##################################################################################################################################################
def main():
    for tries in range(10):
        for _ in range(500):
            print(f"                                                                                        ", end="")
            print(f"\rprogresssing {_ + 1} ...", end="\t")
            schedule = Schedule_matrix(monthly_requests)
            schedule.assign_ner()
            restart = False
            for role in (Role.ICU, Role.ER):
                day_assignable_counts = schedule.day_assignable_counts(role)
                day_assignable_counts_sorted = sorted(day_assignable_counts.items(), key=itemgetter(1))
                min_date, min_count = day_assignable_counts_sorted[0]
                if min_count < (1 if role == Role.ICU else 4):
                    print(f"{role} too tight on {min_date}", end="\t")
                    restart = True
                    break
            if restart:
                continue
            else:
                break
        schedule.assign_day()
        schedule.swap_er_eicu_1()
        schedule.swap_er_eicu_2()
        schedule.swap_er_eicu_3()
        section_score, intern_scores = schedule.evaluator()
        print("")
        for intern in schedule.schedule_matrix:
            print(f"{intern.role},{intern.name},", end='')
            for date, value in intern.schedule.items():
                print(f"{value.value}", end=',')
            print("")
        print(f"section_penalty= {section_score}, intern_satisfaction= {intern_scores}")

main()